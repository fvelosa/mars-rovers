swagger: '2.0'
info:
  version: 0.0.1
  title: 'Mars Rover API'
  description: REST API implementation of a NASA Mars Rovers simulation.
  contact:
    name: Filipe Velosa
    email: filipe.velosa@gmail.com
    url: 'https://github.com/fvelosa'
  license:
    name: MIT
    url: 'http://opensource.org/licenses/MIT'
host: localhost:3000
basePath: /
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  '/rovers':
    x-swagger-router-controller: rovers
    get:
      description: Returns all rovers from the system that the user has access to
      operationId: getAll
      responses:
        '200':
          description: The request has succeeded
          schema:
              $ref: '#/definitions/rover-set'
    post:
      description: Creates a rover
      parameters:
        - name: rover
          in: body
          description: Rover to add
          required: true
          schema:
            $ref: '#/definitions/new-rover'
      responses:
        '200':
          description: Resource created successfully
          schema:
            $ref: '#/definitions/rover'
  '/rovers/{id}':
    x-swagger-router-controller: rovers
    get:
      description: 'Returns a single rover'
      parameters:
        - name: id
          in: path
          description: ID of rover to fetch
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: The request has succeeded
          schema:
            $ref: '#/definitions/rover'
    delete:
      description: Deletes a single rover based on the ID supplied
      produces:
        - text/plain
      parameters:
        - name: id
          in: path
          description: ID of the rover to delete
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Rover deleted
  '/rovers/{id}/routes':
    x-swagger-router-controller: routes
    get:
      description: Returns all routes for a single rover that the user has access to
      parameters:
        - name: id
          in: path
          description: ID of rover to fetch
          required: true
          type: integer
          format: int64
        - name: status
          in: query
          description: status to filter by
          required: false
          type: string
        - name: size
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Set of routes
          schema:
            $ref: '#/definitions/route-set'
    post:
      description: Creates a new route to a single rover
      parameters:
        - name: id
          in: path
          description: ID to fetch
          required: true
          type: integer
          format: int64
        - name: route
          in: body
          description: Route to add
          required: true
          schema:
            $ref: '#/definitions/new-route'
      responses:
        '200':
          description: Resource created successfully
          schema:
            $ref: '#/definitions/route'
  '/routes/':
    x-swagger-router-controller: routes
    get:
      description: Returns all routes the user has access to
      operationId: getAllRoutes
      parameters:
        - name: status
          in: query
          description: status to filter by
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/route-set'
  '/routes/{id}':
    x-swagger-router-controller: routes
    get:
      description: 'Returns a single route'
      parameters:
        - name: id
          in: path
          description: ID to fetch
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/route'
definitions:
  rover:
    type: object
    properties:
      id:
        type: integer
      x:
        type: integer
      y:
        type: integer
      d:
        $ref: '#/definitions/direction'
  rover-set:
    type: array
    items:
      $ref: '#/definitions/rover'
  new-rover:
    type: object
    required:
      - x
      - y
      - d
    properties:
      x:
        type: integer
      y:
        type: integer
      d:
        type: string
  route:
    type: object
    properties:
      id:
        type: integer
      rover_id:
        type: integer
      moves:
        type: string
  route-set:
    type: array
    items:
      $ref: '#/definitions/route'
  new-route:
    type: object
    required:
      - moves
    properties:
      moves:
        type: string
  direction:
    type: string
    enum:
      - N
      - S
      - E
      - W